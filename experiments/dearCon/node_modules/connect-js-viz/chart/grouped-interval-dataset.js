var Dataset = require('./dataset');
var _ = require('underscore');
var GroupedIntervalDataset = (function () {
    function GroupedIntervalDataset(results, metadata, formatters) {
        this._selectLabels = [];
        this._data = [];
        this._metadata = metadata;
        this._selectLabelFormatter = formatters.selectLabelFormatter;
        this._groupValueFormatter = formatters.groupValueFormatter;
        this._selectLabels = this._mapLabels(results);
        this._data = this._mapData(results);
    }
    GroupedIntervalDataset.prototype.getLabels = function () {
        return Dataset.getLabels(this._selectLabels);
    };
    GroupedIntervalDataset.prototype.getSelect = function (label) {
        return Dataset.getSelect(this._selectLabels, label);
    };
    GroupedIntervalDataset.prototype.getData = function () {
        return this._data;
    };
    GroupedIntervalDataset.prototype._mapLabels = function (results) {
        var _this = this;
        return _.chain(results).map(function (result) { return result['results']; }).flatten().map(function (result) {
            var groupPath = Dataset.getGroupPath(result, _this._metadata.groups, _this._groupValueFormatter);
            return _.map(_this._metadata.selects, function (select) { return {
                select: select,
                label: _this._generateLabelForResult(result, select, groupPath)
            }; });
        }).flatten().value();
    };
    GroupedIntervalDataset.prototype._mapData = function (results) {
        var _this = this;
        return _.chain(results).map(function (result) {
            var start = result.interval.start, mappedResult = _this._mapResult(result);
            mappedResult['_x'] = start;
            return mappedResult;
        }).value();
    };
    GroupedIntervalDataset.prototype._mapResult = function (result) {
        var _this = this;
        return _.reduce(result.results, function (mappedResult, intervalResult) {
            var groupPath = Dataset.getGroupPath(intervalResult, _this._metadata.groups, _this._groupValueFormatter);
            _.each(_this._metadata.selects, function (select) {
                var label = _this._generateLabelForResult(mappedResult, select, groupPath);
                mappedResult[label] = intervalResult[select];
            });
            return mappedResult;
        }, {});
    };
    GroupedIntervalDataset.prototype._generateLabelForResult = function (result, select, groupPath) {
        return this._metadata.selects.length > 1 ? groupPath + ' - ' + this._selectLabelFormatter(select) : groupPath;
    };
    return GroupedIntervalDataset;
})();
module.exports = GroupedIntervalDataset;
