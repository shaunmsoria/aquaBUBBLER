var _ = require('underscore');
var Formatters = require('../formatters');
var TableDataset = (function () {
    function TableDataset(metadata, options, results) {
        this.headerRow = this._buildHeaderRow(metadata, options, results);
        this.contentRows = this._buildContentRows(metadata, options, results);
    }
    TableDataset.prototype._buildHeaderRow = function (metadata, options, results) {
        var isColoumnNumeric = function (key) {
            if (metadata.interval) {
                var firstIntervalWithDesiredCol = _(results).find(function (interval) {
                    return _.isObject(_(interval.results).find(function (result) { return result[key]; }));
                });
                var firstRowWithDesiredCol = _(firstIntervalWithDesiredCol.results).find(function (result) { return result[key]; });
                return _.isNumber(firstRowWithDesiredCol[key]);
            }
            var firstRowWithDesiredCol = _(results).find(function (result) { return result[key]; });
            return _.isNumber(firstRowWithDesiredCol[key]);
        };
        var createHeaderCell = function (isGrouped, key) {
            var optionsForField = options.fields[key];
            return {
                isGrouped: isGrouped,
                title: optionsForField && optionsForField.label ? optionsForField.label : key,
                isNumeric: isColoumnNumeric(key)
            };
        };
        var createGroupedHeaderCell = _.partial(createHeaderCell, true);
        var createSelectHeaderCell = _.partial(createHeaderCell, false);
        var groupHeaderCells = _(metadata.groups).map(function (key) { return createGroupedHeaderCell(key); });
        var selectHeaderCells = _(metadata.selects).map(function (key) { return createSelectHeaderCell(key); });
        if (metadata.interval) {
            var intervalHeader = {
                isGrouped: false,
                title: options.intervals && options.intervals.label ? options.intervals.label : '',
                isNumeric: false,
                isInterval: true
            };
            return _.union([intervalHeader], groupHeaderCells, selectHeaderCells);
        }
        return _.union(groupHeaderCells, selectHeaderCells);
    };
    TableDataset.prototype._buildContentRows = function (metadata, options, results) {
        var createContentCell = function (isGrouped, result, key) {
            var optionsForField = options.fields[key];
            var rawValue = result[key];
            var isNumeric = _.isNumber(rawValue);
            var defaultFormatter = isNumeric ? d3.format(',.2f') : function (value) { return value; };
            var valueFormatter = optionsForField && optionsForField.valueFormatter ? optionsForField.valueFormatter : defaultFormatter;
            return {
                isGrouped: isGrouped,
                rawValue: rawValue,
                displayedValue: valueFormatter(rawValue),
                isNumeric: isNumeric
            };
        };
        var createIntervalCell = function (result) {
            var serverTimeFormat = d3.time.format('%Y-%m-%dT%H:%M:%SZ');
            var startDate = serverTimeFormat.parse(result.interval.start);
            var endDate = serverTimeFormat.parse(result.interval.end);
            var defaultFormat = function (start, end) {
                var timeFormat = options.intervals.formats[metadata.interval];
                var timezone = options.timezone || metadata.timezone;
                var startDate = Formatters.formatDate(start, timezone, timeFormat);
                var endDate = Formatters.formatDate(end, timezone, timeFormat);
                return startDate + ' - ' + endDate;
            };
            var intervalFormatter = options.intervals.valueFormatter ? options.intervals.valueFormatter : defaultFormat;
            return {
                isGrouped: false,
                rawValue: result.interval,
                displayedValue: intervalFormatter(startDate, endDate),
                isNumeric: false,
                isInterval: true
            };
        };
        var createGroupedContentCell = _.partial(createContentCell, true);
        var createSelectContentCell = _.partial(createContentCell, false);
        var createRow = function (rowResult, intervalCell) {
            var groupedContentCells = _(metadata.groups).map(function (key) { return createGroupedContentCell(rowResult, key); });
            var selectContentCells = _(metadata.selects).map(function (key) { return createSelectContentCell(rowResult, key); });
            if (intervalCell) {
                return _.union([intervalCell], groupedContentCells, selectContentCells);
            }
            return _.union(groupedContentCells, selectContentCells);
        };
        if (metadata.interval) {
            return _(results).reduce(function (memo, intervalRow) {
                var intervalCell = createIntervalCell(intervalRow);
                var createIntervalRow = _.partial(createRow, _, intervalCell);
                return _.union(memo, _(intervalRow.results).map(createIntervalRow));
            }, []);
        }
        var createContentRow = _.partial(createRow, _, null);
        return _(results).map(createContentRow);
    };
    return TableDataset;
})();
exports.TableDataset = TableDataset;
