var ErrorHandling = require('../error-handling');
var _ = require('underscore');
var Loader = require('../loader');
var ResultHandling = require('../result-handling');
var Dom = require('../dom');
var Counter = require('./counter');
var Text = (function () {
    function Text(targetElement, textOptions) {
        this._options = _.extend({
            transitionOnReload: true,
            text: {
                counterDurationMs: 800
            },
            fields: {}
        }, textOptions);
        this.targetElement = Dom.getElement(targetElement);
        this.loader = new Loader(this.targetElement);
        this._currentValue = 0;
        this._resultHandler = new ResultHandling.ResultHandler();
    }
    Text.prototype.displayData = function (resultsPromise, metadata, fullReload) {
        if (fullReload === void 0) { fullReload = true; }
        this._renderText(metadata);
        if (!this._checkMetaDataIsApplicable(metadata)) {
            this._renderQueryNotApplicable();
            return;
        }
        this._resultHandler.handleResult(resultsPromise, metadata, this, this._loadData, fullReload);
    };
    Text.prototype._loadData = function (results, metadata, fullReload) {
        var options = this._options, onlyResult = results.results[0], aliasOfSelect = metadata.selects[0], defaultFieldOption = { valueFormatter: function (value) { return value; } }, fieldOption = options.fields[aliasOfSelect] || defaultFieldOption, valueFormatter = fieldOption.valueFormatter, value = onlyResult[aliasOfSelect], animationElementClassList = this._valueContainerElement.classList, isIncreasing = value > this._currentValue, hasChanged = valueFormatter(this._currentValue) !== valueFormatter(value), duration = options.text.counterDurationMs, transitionClass = isIncreasing ? 'connect-text-value-increasing' : 'connect-text-value-decreasing';
        this._showTitle(metadata);
        this._currentValue = value;
        this._counter = this._counter || new Counter(this._valueTextElement, duration, valueFormatter);
        if (!hasChanged)
            return;
        if (!options.transitionOnReload && fullReload) {
            this._counter.setValue(value);
        }
        else {
            animationElementClassList.add(transitionClass);
            this._counter.update(value, function () {
                animationElementClassList.remove(transitionClass);
            });
        }
    };
    Text.prototype.clear = function () {
        this._rendered = false;
        Dom.removeAllChildren(this.targetElement);
    };
    Text.prototype._checkMetaDataIsApplicable = function (metadata) {
        var exactlyOneSelect = metadata.selects.length === 1, noGroupBys = metadata.groups.length === 0, noInterval = metadata.interval == null;
        return exactlyOneSelect && noGroupBys && noInterval;
    };
    Text.prototype._showTitle = function (metadata) {
        var options = this._options, aliasOfSelect = metadata.selects[0], title = options.title, titleText = title && title.length > 0 ? title.toString() : aliasOfSelect, showTitle = title !== false;
        this._titleElement.textContent = titleText;
        this._titleElement.style.display = !showTitle ? 'none' : '';
    };
    Text.prototype._renderText = function (metadata) {
        if (this._rendered)
            return;
        var container = document.createElement('div'), label = document.createElement('span'), elementForWidget = this.targetElement, spanForValues = document.createElement('span'), valueTextElement = document.createElement('span'), valueIncreaseIconElement = document.createElement('span'), valueDecreaseIconElement = document.createElement('span'), valueElement = document.createElement('div');
        container.className = 'connect-viz connect-text';
        label.className = 'connect-viz-title';
        valueElement.className = 'connect-viz-result';
        valueTextElement.className = 'connect-text-value';
        valueIncreaseIconElement.className = 'connect-text-icon connect-text-icon-increase ion-arrow-up-b';
        valueDecreaseIconElement.className = 'connect-text-icon connect-text-icon-decrease ion-arrow-down-b';
        this.clear();
        spanForValues.appendChild(valueIncreaseIconElement);
        spanForValues.appendChild(valueDecreaseIconElement);
        spanForValues.appendChild(valueTextElement);
        valueElement.appendChild(spanForValues);
        container.appendChild(label);
        container.appendChild(valueElement);
        elementForWidget.appendChild(container);
        this._valueContainerElement = valueElement;
        this._valueTextElement = valueTextElement;
        this._valueTextElement.innerHTML = '&nbsp;';
        this._titleElement = label;
        this._showTitle(metadata);
        this._rendered = true;
    };
    Text.prototype._renderQueryNotApplicable = function () {
        this._rendered = false;
        ErrorHandling.displayFriendlyError(this.targetElement, 'unsupportedQuery');
    };
    return Text;
})();
module.exports = Text;
