var ErrorHandling = require('./error-handling');
var ResultHandling;
(function (ResultHandling) {
    var ResultHandler = (function () {
        function ResultHandler() {
            this._currentRequestCount = 0;
            this._lastRequestProcessed = 0;
            this._lastReloadTime = 0;
        }
        ResultHandler.prototype.handleResult = function (resultsPromise, metadata, visualization, loadData, fullReload) {
            var _this = this;
            var loader = visualization.loader, targetElement = visualization.targetElement, requestNumber, lastReloadTime;
            if (fullReload || this._lastReloadTime === 0) {
                ErrorHandling.clearError(targetElement);
                loader.show();
                this._lastReloadTime = Date.now();
                this._currentRequestCount = 0;
                this._lastRequestProcessed = 0;
            }
            lastReloadTime = this._lastReloadTime;
            requestNumber = this._currentRequestCount;
            this._currentRequestCount++;
            resultsPromise.then(function (results) {
                if (lastReloadTime < _this._lastReloadTime)
                    return;
                if (requestNumber < _this._lastRequestProcessed)
                    return;
                loader.hide();
                _this._lastRequestProcessed = requestNumber;
                try {
                    ErrorHandling.clearError(targetElement);
                    if (results == null || results.results == null || !results.results.length) {
                        ErrorHandling.displayFriendlyError(targetElement, 'noResults');
                        return;
                    }
                    loadData.call(visualization, results, metadata, fullReload);
                }
                catch (error) {
                    ErrorHandling.logError(error);
                    ErrorHandling.displayFriendlyError(targetElement);
                }
            }, function (error) {
                loader.hide();
                ErrorHandling.clearError(targetElement);
                ErrorHandling.handleError(targetElement, error);
            });
        };
        return ResultHandler;
    })();
    ResultHandling.ResultHandler = ResultHandler;
})(ResultHandling || (ResultHandling = {}));
module.exports = ResultHandling;
