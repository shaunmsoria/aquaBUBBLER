var ErrorHandling;
(function (ErrorHandling) {
    var errorTypes = {
        noResults: {
            icon: 'ion-sad-outline',
            defaultMessage: 'No Results'
        },
        network: {
            icon: 'ion-ios-bolt',
            defaultMessage: 'Network Error'
        },
        unsupportedQuery: {
            icon: 'ion-wrench',
            defaultMessage: 'Unsupported Query'
        },
        other: {
            icon: 'ion-bug',
            defaultMessage: 'Error'
        }
    };
    var statusErrorTypes = {
        status404: 'noResults',
        statusNetworkFailure: 'network',
        status408: 'network',
        status502: 'network',
        status503: 'network',
        status504: 'network',
    };
    function handleError(targetElement, error) {
        var status = 'status' + error.status, errorType = statusErrorTypes[status] || 'other';
        displayFriendlyError(targetElement, errorType);
    }
    ErrorHandling.handleError = handleError;
    function clearError(targetElement) {
        var elementForError = targetElement, errorContainer = elementForError.querySelector('.connect-error'), viz = elementForError.querySelector('.connect-viz');
        if (errorContainer) {
            errorContainer.parentNode.removeChild(errorContainer);
        }
        if (viz) {
            viz.classList.remove('connect-viz-in-error');
        }
    }
    ErrorHandling.clearError = clearError;
    function displayFriendlyError(targetElement, type) {
        if (type === void 0) { type = 'other'; }
        var errorIcon = errorTypes[type].icon, errorMessage = errorTypes[type].defaultMessage, elementForError = targetElement, errorIconElement = document.createElement('span'), errorMessageElement = document.createElement('span'), errorElement = document.createElement('div'), errorClassName = 'connect-error', viz = elementForError.querySelector('.connect-viz'), result = elementForError.querySelector('.connect-viz-result') || viz;
        if (!elementForError) {
            return;
        }
        errorMessageElement.textContent = errorMessage;
        errorIconElement.className += errorIcon + ' connect-error-icon';
        errorElement.className += errorClassName + ' connect-error-message';
        errorElement.appendChild(errorIconElement);
        errorElement.appendChild(errorMessageElement);
        if (viz && result) {
            result.appendChild(errorElement);
            viz.className += ' connect-viz-in-error';
        }
    }
    ErrorHandling.displayFriendlyError = displayFriendlyError;
    function logError(error) {
        var printable = error;
        if (console && console.log) {
            console.log(error.message);
            if (printable.stack)
                console.log(printable.stack);
        }
    }
    ErrorHandling.logError = logError;
})(ErrorHandling || (ErrorHandling = {}));
module.exports = ErrorHandling;
