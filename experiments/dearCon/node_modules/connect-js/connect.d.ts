import Api = require('./api');
import Queries = require('./queries/queries');
import Config = require('./config');
import VizConfig = require('../viz/config');
import Viz = require('../viz/viz');
import DataVisualization = require('../viz/data-visualization');
declare class Connect implements Viz.Visualizations {
    _config: Config.ConnectConfig;
    _client: Api.Client;
    constructor(config: Config.ConnectConfig);
    push(collectionNameOrBatches: any, eventOrEvents?: any): Q.IPromise<any>;
    query(collection: string): Queries.ConnectQuery;
    private getConfig(config);
    private _createClient();
    private _buildBatchFromArray(collection, events);
    chart: (query: Queries.ConnectQuery, targetElementId: string, chartOptions: VizConfig.VisualizationOptions) => DataVisualization;
    text: (query: Queries.ConnectQuery, targetElementId: string, textOptions: VizConfig.VisualizationOptions) => DataVisualization;
    table: (query: Queries.ConnectQuery, targetElementId: string, tableOptions: VizConfig.VisualizationOptions) => DataVisualization;
    gauge: (query: Queries.ConnectQuery, targetElementId: string, tableOptions: VizConfig.VisualizationOptions) => DataVisualization;
}
export = Connect;
