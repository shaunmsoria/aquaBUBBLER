import Q = require('q');
declare module Api {
    interface Query {
        select?: Api.QuerySelects;
        filter?: Api.QueryFilters;
        groupBy?: string[];
        timeframe?: string | Api.QueryTimeframe;
        interval?: string;
        timezone?: string | number;
    }
    interface Metadata {
        selects: string[];
        groups: string[];
        interval: string;
        timezone: string | number;
    }
    interface QuerySelect {
        [index: string]: string;
    }
    interface QuerySelects {
        [index: string]: string | Api.QuerySelect;
    }
    interface QueryFilter {
        [index: string]: string;
    }
    interface QueryFilters {
        [index: string]: Api.QueryFilter;
    }
    interface QueryTimeframe {
        timeframe?: string;
        from?: Date;
        to?: Date;
    }
    interface QueryResultInterval {
        start: string;
        end: string;
    }
    interface QueryResultItem {
        [index: string]: any;
        interval?: QueryResultInterval;
        results?: QueryResultItem[];
    }
    interface QueryResults {
        metadata: Metadata;
        results: QueryResultItem[];
    }
    class Client {
        _baseUrl: string;
        _apiKey: string;
        constructor(baseUrl: string, apiKey: string);
        query(collection: string, query: Api.Query): Q.IPromise<QueryResults>;
        pushBatch(batches: any): Q.IPromise<any>;
        push(collection: string, newEvent: any): Q.IPromise<any>;
        private _send(requestToSend);
        private _buildUrl(path);
    }
}
export = Api;
