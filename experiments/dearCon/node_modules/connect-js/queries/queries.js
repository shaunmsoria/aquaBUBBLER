var Filters = require('./filters');
var Timeframes = require('./timeframes');
var QueryBuilder = require('./query-builder');
var _ = require('underscore');
var Queries;
(function (Queries) {
    var ConnectQuery = (function () {
        function ConnectQuery(client, collection, selects, filters, groups, timeframe, interval, timezone) {
            this._client = client;
            this._collection = collection;
            this._selects = selects || {};
            this._filters = filters || [];
            this._groups = groups || [];
            this._timeframe = timeframe || null;
            this._interval = interval || null;
            this._timezone = timezone || null;
        }
        ConnectQuery.prototype.collection = function () {
            return this._collection;
        };
        ConnectQuery.prototype.metadata = function () {
            return {
                selects: _(this._selects).keys(),
                groups: this._groups,
                interval: this._interval,
                timezone: this._timezone || 'UTC'
            };
        };
        ConnectQuery.prototype.select = function (selects) {
            for (var key in selects) {
                var select = selects[key];
                if (!_.isString(select) && Object.keys(select).length > 1)
                    throw new Error('You can only provide one aggregation function per select.');
            }
            return new ConnectQuery(this._client, this._collection, selects, this._filters, this._groups, this._timeframe, this._interval, this._timezone);
        };
        ConnectQuery.prototype.filter = function (factory) {
            var builder = function (field) {
                return new Filters.QueryFilterBuilder(field);
            };
            var filter = factory(builder);
            if (_.any(this._filters, function (x) { return x.field === filter.field && x.operator === filter.operator; }))
                throw new Error('You have already defined a filter on operator \'' + filter.operator + '\' for field \'' + filter.field + '\'.');
            var filters = this._filters.concat(filter);
            return new ConnectQuery(this._client, this._collection, this._selects, filters, this._groups, this._timeframe, this._interval, this._timezone);
        };
        ConnectQuery.prototype.groupBy = function (field) {
            var groups;
            if (typeof field === 'string') {
                groups = this._groups.concat([field]);
            }
            else {
                groups = this._groups.concat(field);
            }
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, groups, this._timeframe, this._interval, this._timezone);
        };
        ConnectQuery.prototype.timeframe = function (factory) {
            var timeframe;
            if (typeof factory === 'string') {
                timeframe = factory;
            }
            else {
                var builder = new Timeframes.TimeframeBuilder();
                timeframe = factory(builder);
            }
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, this._groups, timeframe, this._interval, this._timezone);
        };
        ConnectQuery.prototype.interval = function (interval) {
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, this._groups, this._timeframe, interval, this._timezone);
        };
        ConnectQuery.prototype.timezone = function (timezone) {
            if (!this._timeframe && !this._interval)
                throw new Error('You can only set a timezone when a valid timeframe or interval has been set.');
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, this._groups, this._timeframe, this._interval, timezone);
        };
        ConnectQuery.prototype.execute = function () {
            var queryBuilder = new QueryBuilder(), apiQuery = queryBuilder.build(this._selects, this._filters, this._groups, this._timeframe, this._interval, this._timezone);
            return this._client.query(this._collection, apiQuery);
        };
        return ConnectQuery;
    })();
    Queries.ConnectQuery = ConnectQuery;
})(Queries || (Queries = {}));
module.exports = Queries;
