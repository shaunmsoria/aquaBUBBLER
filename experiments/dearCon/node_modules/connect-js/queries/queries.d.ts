import Api = require('../api');
import Filters = require('./filters');
import Selects = require('./selects');
import Timeframes = require('./timeframes');
import Q = require('q');
declare module Queries {
    type FilterFactory = (builder: (field: string) => Filters.QueryFilterBuilder) => Filters.QueryFilter;
    type TimeframeFactory = (builder: Timeframes.TimeframeBuilder) => Timeframes.Timeframe;
    class ConnectQuery {
        _client: Api.Client;
        _collection: string;
        _selects: Selects.QuerySelects;
        _filters: Filters.QueryFilters;
        _groups: string[];
        _timeframe: Timeframes.Timeframe;
        _interval: string;
        _timezone: Timeframes.Timezone;
        constructor(client: Api.Client, collection: string, selects?: Selects.QuerySelects, filters?: Filters.QueryFilters, groups?: string[], timeframe?: Timeframes.Timeframe, interval?: string, timezone?: Timeframes.Timezone);
        collection(): string;
        metadata(): Api.Metadata;
        select(selects: Selects.QuerySelects): ConnectQuery;
        filter(factory: FilterFactory): ConnectQuery;
        groupBy(field: string | string[]): ConnectQuery;
        timeframe(factory: string | TimeframeFactory): ConnectQuery;
        interval(interval: string): ConnectQuery;
        timezone(timezone: Timeframes.Timezone): ConnectQuery;
        execute(): Q.IPromise<any>;
    }
}
export = Queries;
